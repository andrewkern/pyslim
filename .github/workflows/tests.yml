name: Tests

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test:
    name: Python
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.8, 3.9]
        os: [macos-latest, ubuntu-latest]
    defaults:
      run:
        shell: bash
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache conda and dependancies
        id: cache
        uses: actions/cache@v2
        env:
          # Increase this to reset the cache if the key hasn't changed.
          CACHE_NUM: 4
        with:
          path: |
            c:\Miniconda\envs\anaconda-client-env
            /usr/share/miniconda/envs/anaconda-client-env
            ~/osx-conda
            ~/.profile
          key: ${{ runner.os }}-${{ matrix.python}}-conda-v${{ env.CACHE_NUM }}-${{ hashFiles('requirements/CI-pip/requirements.txt') }}-${{ hashFiles('requirements/CI-conda/requirements.txt') }}-${{ hashFiles('requirements/CI-docs/requirements.txt') }}

      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          activate-environment: anaconda-client-env
          python-version: ${{ matrix.python }}
          channels: conda-forge
          channel-priority: strict
          auto-update-conda: true
          use-only-tar-bz2: true

      - name: Fix windows .profile
        if: steps.cache.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
        run: |
          cp ~/.bash_profile ~/.profile

      - name: Install conda deps
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash -l {0} #We need a login shell to get conda
        run: |
          if [ "$RUNNER_OS" != "Windows" ]; then
            conda install --yes slim
          fi
          conda install --yes --file=requirements/CI-conda/requirements.txt

      - name: Install pip deps
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          pip install -r requirements/CI-pip/requirements.txt --user
          pip install -r requirements/CI-docs/requirements.txt --user

      - name: Fix OSX Cache Write #OSX Won't let the cache restore due to file perms
        if: steps.cache.outputs.cache-hit != 'true' && matrix.os == 'macos-latest'
        run: |
          cp -r /usr/local/miniconda/envs/anaconda-client-env ~/osx-conda

      - name: Fix OSX Cache Restore
        if: steps.cache.outputs.cache-hit == 'true' && matrix.os == 'macos-latest'
        run: |
          mkdir -p /usr/local/miniconda/envs
          sudo cp -r ~/osx-conda /usr/local/miniconda/envs/anaconda-client-env
      #- name: Build SLiM
      #  if: steps.cache.outputs.cache-hit != 'true' &&
      #    (matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest')
      #  run: |
      #    git clone https://github.com/messerlab/SLiM.git
      #    mkdir -p SLiM/Release
      #    cd SLiM/Release
      #    cmake -D CMAKE_BUILD_TYPE=Release ..
      #    make -j 2
      - name: Run tests
        run: |
          source ~/.profile
          conda activate anaconda-client-env
          # export PATH=$PWD/SLiM/Release:$PATH # don't need to add SLiM to path, we ain't building it
          which slim
          slim -v
          pytest -xv -n2 tests

  tests-windows-latest-SLiM:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { sys: mingw64, env: x86_64, python: 3.8 }
          - { sys: ucrt64, env: ucrt-x86_64, python: 3.8 }
    name: Windows CLI (${{ matrix.sys }}, ${{ matrix.env }})
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Cache conda and dependancies
        id: cache
        uses: actions/cache@v2
        env:
          # Increase this to reset the cache if the key hasn't changed.
          CACHE_NUM: 4
        with:
          path: |
            c:\Miniconda3\envs\anaconda-client-env
            /usr/share/miniconda/envs/anaconda-client-env
            ~/.bash_profile
            ~/.profile
            SLiM
          key: ${{ runner.os }}-${{ matrix.python}}-conda-v${{ env.CACHE_NUM }}-${{ hashFiles('requirements/CI-conda/ci-environment.yml') }}

      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: conda-incubator/setup-miniconda@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          miniconda-version: "latest"
          activate-environment: anaconda-client-env
          environment-file: requirements/CI-conda/ci-environment.yml
          auto-activate-base: false
          python-version: ${{ matrix.python }}
      - name: Setup MSYS2 ${{matrix.sys}}
        uses: msys2/setup-msys2@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
            git
            base-devel
            msys2-devel
            mingw-w64-${{matrix.env}}-toolchain
            mingw-w64-${{matrix.env}}-cmake
            mingw-w64-${{matrix.env}}-autotools

      - name: Fix windows .profile
        run: |
          cp ~/.bash_profile ~/.profile

      - name: Build SLiM windows
        if: steps.cache.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          git clone https://github.com/messerlab/SLiM.git
          mkdir -p SLiM/Release
          cd SLiM/windows_compat/gnulib
          touch --date="`date`" aclocal.m4 Makefile.am configure configure.ac config.h.in Makefile.in
          cd ../..
          cd Release
          cmake -G"MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          make -j 2

      - name: Run tests
        run: |
          conda info
          conda list
          export PATH=$PWD/SLiM/Release:$PATH
          slim -v
          pytest --version
          python -m pytest -n2 -xv tests/

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
